// This file will contain general UI logic.

import {
    subforumNav, // Only one occurrence
    topicListSection,
    topicViewSection,
    settingsPageSection,
    queuePageSection,
    activityPageSection,
    scheduleModal,
    mainElement,
    mainContainer,
    primaryPane
} from './dom.js';

import { currentSettings } from './settings.js'; // Need currentSettings for link security

let lastVisibleSectionId = 'activity-page-section'; // Default to activity page

// Import loadActivityData from activity.js
import { loadActivityData } from './activity.js';

export function showSection(sectionIdToShow, navElement = null) {
    if (!sectionIdToShow) {
        sectionIdToShow = 'activity-page-section'; // Default to activity page
    }

    setActiveNav(navElement);

    // Always keep the sidebar visible
    subforumNav.style.display = 'flex'; // Use flex as defined in CSS

    // Hide all main content sections first
    if (topicListSection) topicListSection.style.display = 'none';
    if (topicViewSection) topicViewSection.style.display = 'none';
    if (settingsPageSection) settingsPageSection.style.display = 'none';
    if (queuePageSection) queuePageSection.style.display = 'none';
    if (activityPageSection) activityPageSection.style.display = 'none'; // Hide activity page too

    // Show the requested section
    const sectionElement = document.getElementById(sectionIdToShow);
    if (sectionElement) {
        sectionElement.style.display = 'block'; // Or 'flex' if it uses flex layout internally
        
        // Update last visible section only if it's a main content view that isn't a modal-like page
        // or if it's the new default activity page.
        if (['topic-list-section', 'topic-view-section', 'activity-page-section'].includes(sectionIdToShow)) {
             lastVisibleSectionId = sectionIdToShow;
        }

        if (sectionIdToShow === 'activity-page-section') {
            if (typeof loadActivityData === 'function') {
                loadActivityData();
            } else {
                console.error("loadActivityData is not a function or not yet set.");
            }
        }
    } else if (sectionIdToShow === 'subforum-list-only') {
         // Special case: only show sidebar, hide all right-pane sections
         // This might be triggered by back-to-subforums button
    } else {
        console.warn(`Section with ID ${sectionIdToShow} not found. Defaulting to activity page.`);
        if (activityPageSection) {
            activityPageSection.style.display = 'block';
            lastVisibleSectionId = 'activity-page-section';
            if (typeof loadActivityData === 'function') {
                loadActivityData();
            }
        } else {
            // Fallback if activityPageSection itself is somehow missing
            if (topicListSection) topicListSection.style.display = 'block';
            lastVisibleSectionId = 'topic-list-section';
        }
    }
}

export function applyDarkMode() {
    document.body.classList.add('dark-mode');
}

export function showLinkWarningPopup(linkUrl, linkText) {
    const existingPopup = document.getElementById('link-warning-popup');
    if (existingPopup) {
        existingPopup.remove();
    }

    const popup = document.createElement('div');
    popup.id = 'link-warning-popup';
    popup.className = 'modal';
    popup.style.display = 'block';

    const popupContent = document.createElement('div');
    popupContent.className = 'modal-content link-warning-content';

    const closeBtnEl = document.createElement('span');
    closeBtnEl.className = 'close-btn';
    closeBtnEl.innerHTML = '&times;';
    closeBtnEl.onclick = () => popup.remove();

    const title = document.createElement('h4');
    title.textContent = 'Link Security Warning';

    const text = document.createElement('p');
    text.innerHTML = `You clicked on a link generated by an LLM: <br>
                      <strong>Text:</strong> ${linkText}<br>
                      <strong>URL:</strong> <span class="link-url">${linkUrl}</span>`;

    const warning = document.createElement('p');
    warning.innerHTML = `<strong>Warning:</strong> LLM data can be outdated or inaccurate. This link might lead to an unexpected or potentially harmful website. Verify the destination before proceeding.`;
    warning.style.color = 'orange';

    const buttonContainer = document.createElement('div');
    buttonContainer.style.marginTop = '1rem';
    buttonContainer.style.textAlign = 'right';

    const proceedBtn = document.createElement('button');
    proceedBtn.textContent = 'Proceed to Link';
    proceedBtn.onclick = () => {
        window.open(linkUrl, '_blank', 'noopener noreferrer');
        popup.remove();
    };

    const cancelBtnEl = document.createElement('button');
    cancelBtnEl.textContent = 'Cancel';
    cancelBtnEl.style.marginLeft = '0.5rem';
    cancelBtnEl.onclick = () => popup.remove();

    buttonContainer.appendChild(cancelBtnEl);
    buttonContainer.appendChild(proceedBtn);
    popupContent.appendChild(closeBtnEl);
    popupContent.appendChild(title);
    popupContent.appendChild(text);
    popupContent.appendChild(warning);
    popupContent.appendChild(buttonContainer);
    popup.appendChild(popupContent);
    document.body.appendChild(popup);

    popup.addEventListener('click', (event) => {
        if (event.target === popup) {
            popup.remove();
        }
    });
}

// Export lastVisibleSectionId so main.js can use it
export { lastVisibleSectionId };

// Add event listener for closing modals if clicking outside of them
window.addEventListener('click', (event) => {
    if (event.target == scheduleModal) {
        scheduleModal.style.display = 'none';
    }
    // Settings modal is now a page, so this is not needed
    // if (event.target == settingsModal) {
    //     settingsModal.style.display = 'none';
    // }
});

// Apply dark mode on initial load
applyDarkMode();

export function togglePrimaryPaneExpansion() {
    if (primaryPane && mainElement) {
        const isExpanded = primaryPane.classList.toggle('primary-pane-expanded');
        mainElement.classList.toggle('pane-expanded-mode', isExpanded);
    }
}

// Helper function to check for mobile viewport
export const isMobile = () => window.matchMedia("(max-width: 768px)").matches;

export function toggleMobileMenu() {
    if (subforumNav) {
        subforumNav.classList.toggle('mobile-menu-visible');
    }
}

export function openSecondaryPane(htmlContent, title = 'Details') {
    if (!mainContainer) return;

    let secondaryPane = document.getElementById('secondary-pane');
    if (!secondaryPane) {
        secondaryPane = document.createElement('div');
        secondaryPane.id = 'secondary-pane';
        mainContainer.appendChild(secondaryPane);
    }

    // Always ensure the pane has the correct inner structure
    secondaryPane.innerHTML = `
        <div class="pane-header">
            <h3>${title}</h3>
            <button class="close-pane-btn" title="Close Pane">&times;</button>
        </div>
        <div class="pane-content">
            ${htmlContent}
        </div>
    `;

    // Attach event listeners
    secondaryPane.querySelector('.close-pane-btn').addEventListener('click', closeSecondaryPane);

    if (isMobile()) {
        // Mobile logic: show as a "peeking" bottom sheet
        secondaryPane.classList.add('mobile-pane-peek');
        secondaryPane.classList.remove('mobile-pane-visible'); // Ensure it's not fully visible initially

        // Add a new listener to the header to toggle full visibility
        const paneHeader = secondaryPane.querySelector('.pane-header');
        // Avoid adding duplicate listeners
        if (!paneHeader.dataset.listenerAttached) {
            paneHeader.addEventListener('click', (e) => {
                // Don't toggle if the close button itself was clicked
                if (e.target.classList.contains('close-pane-btn')) return;
                
                secondaryPane.classList.toggle('mobile-pane-visible');
                // If it's not peeking anymore, it must be visible.
                if(!secondaryPane.classList.contains('mobile-pane-peek')) {
                    secondaryPane.classList.add('mobile-pane-peek');
                }
            });
            paneHeader.dataset.listenerAttached = 'true';
        }

    } else {
        // Desktop logic: use tripane view
        if (primaryPane && !primaryPane.classList.contains('primary-pane-expanded')) {
            primaryPane.classList.add('primary-pane-expanded');
            if (mainElement) {
                mainElement.classList.add('pane-expanded-mode');
            }
        }
        mainContainer.classList.add('tripane-active');
    }
}

export function closeSecondaryPane() {
    if (!mainContainer) return;
    const secondaryPane = document.getElementById('secondary-pane');
    if (!secondaryPane) return;

    if (isMobile()) {
        // Mobile logic: just hide the pane, don't remove it
        secondaryPane.classList.remove('mobile-pane-peek');
        secondaryPane.classList.remove('mobile-pane-visible');
    } else {
        // Desktop logic: remove the element and the tripane class
        secondaryPane.remove();
        mainContainer.classList.remove('tripane-active');

        // Also contract the primary pane
        if (primaryPane && primaryPane.classList.contains('primary-pane-expanded')) {
            primaryPane.classList.remove('primary-pane-expanded');
            if (mainElement) {
                mainElement.classList.remove('pane-expanded-mode');
            }
        }
    }
}

/**
 * Creates and displays the theme creator modal.
 * The modal is draggable and its contents will be populated by the theming engine.
 */
export function openThemeCreator() {
    // Prevent creating multiple modals
    if (document.getElementById('theme-creator-modal')) {
        return;
    }

    const modal = document.createElement('div');
    modal.id = 'theme-creator-modal';
    modal.className = 'modal';
    modal.style.display = 'block';

    modal.innerHTML = `
        <div class="modal-content">
            <div id="theme-creator-header">
                <h4>Theme Creator</h4>
                <span class="close-btn" title="Close">&times;</span>
            </div>
            <div id="theme-creator-content">
                <p>Loading theme variables...</p>
            </div>
            <div id="theme-creator-footer" style="padding: 10px 15px; border-top: 1px solid #ccc; background-color: #f0f0f0;">
                <!-- Buttons will be added here by the theming engine -->
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    const modalContent = modal.querySelector('.modal-content');
    const header = modal.querySelector('#theme-creator-header');
    const closeBtn = modal.querySelector('.close-btn');

    closeBtn.onclick = () => modal.remove();
    modal.onclick = (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    };

    // Make the modal draggable
    makeDraggable(modalContent, header);
}

/**
 * Makes an element draggable by its header.
 * @param {HTMLElement} element - The element to make draggable.
 * @param {HTMLElement} header - The header element that acts as the drag handle.
 */
function makeDraggable(element, header) {
    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

    header.onmousedown = dragMouseDown;

    function dragMouseDown(e) {
        e = e || window.event;
        e.preventDefault();
        // Get the mouse cursor position at startup:
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = closeDragElement;
        // Call a function whenever the cursor moves:
        document.onmousemove = elementDrag;
    }

    function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();
        // Calculate the new cursor position:
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        // Set the element's new position:
        element.style.top = (element.offsetTop - pos2) + "px";
        element.style.left = (element.offsetLeft - pos1) + "px";
    }

    function closeDragElement() {
        // Stop moving when mouse button is released:
        document.onmouseup = null;
        document.onmousemove = null;
    }
}

export function setActiveNav(clickedElement) {
    // Find all nav links in the main navigation
    const navLinks = document.querySelectorAll('#main-nav ul li a');

    // Remove 'active' class from all links
    navLinks.forEach(link => {
        link.classList.remove('active');
    });

    // Add 'active' class to the clicked link
    if (clickedElement) {
        clickedElement.classList.add('active');
    }
}