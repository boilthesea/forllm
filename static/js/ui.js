// This file will contain general UI logic.

import {
    subforumNav,
    subforumNav,
    topicListSection,
    topicViewSection,
    settingsPageSection,
    queuePageSection,
    activityPageSection, // Added for activity page
    scheduleModal
} from './dom.js';

import { currentSettings } from './settings.js'; // Need currentSettings for link security

let lastVisibleSectionId = 'activity-page-section'; // Default to activity page

// Import loadActivityData from activity.js
import { loadActivityData } from './activity.js';

export function showSection(sectionIdToShow) {
    if (!sectionIdToShow) {
        sectionIdToShow = 'activity-page-section'; // Default to activity page
    }

    // Always keep the sidebar visible
    subforumNav.style.display = 'flex'; // Use flex as defined in CSS

    // Hide all main content sections first
    if (topicListSection) topicListSection.style.display = 'none';
    if (topicViewSection) topicViewSection.style.display = 'none';
    if (settingsPageSection) settingsPageSection.style.display = 'none';
    if (queuePageSection) queuePageSection.style.display = 'none';
    if (activityPageSection) activityPageSection.style.display = 'none'; // Hide activity page too

    // Show the requested section
    const sectionElement = document.getElementById(sectionIdToShow);
    if (sectionElement) {
        sectionElement.style.display = 'block'; // Or 'flex' if it uses flex layout internally
        
        // Update last visible section only if it's a main content view that isn't a modal-like page
        // or if it's the new default activity page.
        if (['topic-list-section', 'topic-view-section', 'activity-page-section'].includes(sectionIdToShow)) {
             lastVisibleSectionId = sectionIdToShow;
        }

        if (sectionIdToShow === 'activity-page-section') {
            if (typeof loadActivityData === 'function') {
                loadActivityData();
            } else {
                console.error("loadActivityData is not a function or not yet set.");
            }
        }
    } else if (sectionIdToShow === 'subforum-list-only') {
         // Special case: only show sidebar, hide all right-pane sections
         // This might be triggered by back-to-subforums button
    } else {
        console.warn(`Section with ID ${sectionIdToShow} not found. Defaulting to activity page.`);
        if (activityPageSection) {
            activityPageSection.style.display = 'block';
            lastVisibleSectionId = 'activity-page-section';
            if (typeof loadActivityData === 'function') {
                loadActivityData();
            }
        } else {
            // Fallback if activityPageSection itself is somehow missing
            if (topicListSection) topicListSection.style.display = 'block';
            lastVisibleSectionId = 'topic-list-section';
        }
    }
}

export function applyDarkMode() {
    document.body.classList.add('dark-mode');
}

export function showLinkWarningPopup(linkUrl, linkText) {
    const existingPopup = document.getElementById('link-warning-popup');
    if (existingPopup) {
        existingPopup.remove();
    }

    const popup = document.createElement('div');
    popup.id = 'link-warning-popup';
    popup.className = 'modal';
    popup.style.display = 'block';

    const popupContent = document.createElement('div');
    popupContent.className = 'modal-content link-warning-content';

    const closeBtnEl = document.createElement('span');
    closeBtnEl.className = 'close-btn';
    closeBtnEl.innerHTML = '&times;';
    closeBtnEl.onclick = () => popup.remove();

    const title = document.createElement('h4');
    title.textContent = 'Link Security Warning';

    const text = document.createElement('p');
    text.innerHTML = `You clicked on a link generated by an LLM: <br>
                      <strong>Text:</strong> ${linkText}<br>
                      <strong>URL:</strong> <span class="link-url">${linkUrl}</span>`;

    const warning = document.createElement('p');
    warning.innerHTML = `<strong>Warning:</strong> LLM data can be outdated or inaccurate. This link might lead to an unexpected or potentially harmful website. Verify the destination before proceeding.`;
    warning.style.color = 'orange';

    const buttonContainer = document.createElement('div');
    buttonContainer.style.marginTop = '1rem';
    buttonContainer.style.textAlign = 'right';

    const proceedBtn = document.createElement('button');
    proceedBtn.textContent = 'Proceed to Link';
    proceedBtn.onclick = () => {
        window.open(linkUrl, '_blank', 'noopener noreferrer');
        popup.remove();
    };

    const cancelBtnEl = document.createElement('button');
    cancelBtnEl.textContent = 'Cancel';
    cancelBtnEl.style.marginLeft = '0.5rem';
    cancelBtnEl.onclick = () => popup.remove();

    buttonContainer.appendChild(cancelBtnEl);
    buttonContainer.appendChild(proceedBtn);
    popupContent.appendChild(closeBtnEl);
    popupContent.appendChild(title);
    popupContent.appendChild(text);
    popupContent.appendChild(warning);
    popupContent.appendChild(buttonContainer);
    popup.appendChild(popupContent);
    document.body.appendChild(popup);

    popup.addEventListener('click', (event) => {
        if (event.target === popup) {
            popup.remove();
        }
    });
}

// Export lastVisibleSectionId so main.js can use it
export { lastVisibleSectionId };

// Add event listener for closing modals if clicking outside of them
window.addEventListener('click', (event) => {
    if (event.target == scheduleModal) {
        scheduleModal.style.display = 'none';
    }
    // Settings modal is now a page, so this is not needed
    // if (event.target == settingsModal) {
    //     settingsModal.style.display = 'none';
    // }
});

// Apply dark mode on initial load
applyDarkMode();